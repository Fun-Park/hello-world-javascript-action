# This is a basic workflow that is manually triggered

name: Full Branch Deployment with SF cli

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
# on:
#   workflow_dispatch:
#     inputs:
#       DEBUG:
#         description: 'If DEBUGGING and artifact creation should be enabled'
#         default: false
#         required: false
#         type: boolean
#       ValidateOnly:
#         description: 'Validation only'
#         default: false
#         required: false
#         type: boolean
#       RunTests:
#         description: 'Run Local Tests?'
#         default: false
#         required: false
#         type: boolean
#       PLSPROD:
#         description: 'Use production PLS Endpoint'
#         default: false
#         required: false
#         type: boolean

on: [push]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  generic-full-deploy:
    runs-on: ubuntu-latest   
    env:
      WORKFLOW_ID: 'full_branch_manual.yml'
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PACKAGEXML_FILE: './package/full_package.xml'
      WORKFLOW_DIR: '${{secrets.FORCE_APP_DIR_ALL_ENV}}workflows/'
      NAMECREDENTIAL_DIR: '${{secrets.FORCE_APP_DIR_ALL_ENV}}namedCredentials/'
      EMAIL_DIR: '${{secrets.FORCE_APP_DIR_ALL_ENV}}email/'
      CUSTOM_METADATA_DIR: '${{secrets.FORCE_APP_DIR_ALL_ENV}}customMetadata/'
      WORKING_FOLDER: './Salesforce/'
      TRUSTED_SITE_DIR: '${{secrets.FORCE_APP_DIR_ALL_ENV}}cspTrustedSites/'
      STATIC_RESOURCES_DIR: '${{secrets.FORCE_APP_DIR_ALL_ENV}}staticresources/'
      REMOTE_SETTING_DIR: '${{secrets.FORCE_APP_DIR_ALL_ENV}}remoteSiteSettings/'
      SRC_PROFILE_DIR: '${{secrets.FORCE_APP_DIR_ALL_ENV}}profiles/'
      SRC_DIR: ${{secrets.FORCE_APP_DIR_ALL_ENV}}
      SRC_SETTING_DIR: '${{secrets.FORCE_APP_DIR_ALL_ENV}}settings/'
      SRC_QUEUES_DIR: '${{secrets.FORCE_APP_DIR_ALL_ENV}}queues/'

      NAMECREDENTIAL_RESOURCES: 'AWS_SV4.namedCredential-meta.xml, Declaration_S3_Bucket.namedCredential-meta.xml, AWS_SVC.namedCredential-meta.xml'
      NAMECREDENTIAL_AWS_SV4_FILENAME: 'AWS_SV4.namedCredential-meta.xml'
      DECLARATION3_NAMECREDENTIAL_FILENAME: 'Declaration_S3_Bucket.namedCredential-meta.xml'
      AWS_INTEGRATION_NAMECREDENTIAL_FILENAME: 'AWS_Integration_Engine.namedCredential-meta.xml'
      NAMECREDENTIAL_PLSPlUS: 'PLSPlus_*.namedCredential-meta.xml'
      NAMECREDENTIAL_PLSPLUS_DISPUTES_FILE: 'PLSPlus_Disputes.namedCredential-meta.xml'
      NAMECREDENTIAL_PLSPLUS_NOTIFICATION_FILE: 'PLSPlus_NotifiableWorks.namedCredential-meta.xml'
      NAMECREDENTIAL_PLSPLUS_SIFI_FILE: 'PLSPlus_SIFI.namedCredential-meta.xml'
      NAMECREDENTIAL_PLSPLUS_OTHER_FILE: 'PLSPlus_OTHER.namedCredential-meta.xml'
      NAMECREDENTIAL_AWS_SVC_FILE: 'AWS_SVC.namedCredential-meta.xml'
      TRUST_ACCOUNT_WORKFLOW: 'Trust_Account__c.workflow-meta.xml'
      CASE_WORKFLOW: 'Case.workflow-meta.xml'
      TRANSACTION_PAYLOAD_WORKFLOW: 'Transaction_Payload_Header__c.workflow-meta.xml'
      POLICY_TRANSACTION_WORKFLOW: 'PolicyTransaction__c.workflow-meta.xml'
      POLICY_WORKFLOW: 'Policy__c.workflow-meta.xml'
      DOCUMENT_REQUEST_WORKFLOW: 'Document_Request__c.workflow-meta.xml'
      SURVEY_WORKFLOW: 'Survey__c.workflow-meta.xml'
      USER_WORKFLOW: 'User.workflow-meta.xml'
      CUSTOM_METADATA_AWS_ASJUD_FILE: 'AWS_Setting.AWS_Adjudication_Upload.md-meta.xml'
      TRUSTED_AWS_SITE_FILE: 'AWS.cspTrustedSite-meta.xml'
      CUSTOM_METADATA_ECM_BULK_DECLARATION_FILE: 'ECM_Bulk_Declaration_Email.Bulk_ECM_Declaration.md-meta.xml'
      CUSTOM_METADATA_MERIDIO_DECLARATION_FILE: 'Meridio_Declaration_Setting.Meridio_Declaration_Setting.md-meta.xml'
      EMAIL_DECLARE_FILE: 'Trust_Accounts/Internal_Staff_Trust_Account_Notification.email'
      EMAIL_DECLARE_XML_FILE: 'Trust_Accounts/Internal_Staff_Trust_Account_Notification.email-meta.xml'
      BPOINT_FOR_LICENCING_NAMECREDENTIAL_FILENAME: 'BPOINT_FOR_LICENCING.namedCredential-meta.xml'
      BPOINT_FOR_POLICY_NAMECREDENTIAL_FILENAME: 'BPOINT_FOR_POLICY.namedCredential-meta.xml'
      BPOINT_FOR_OTHERS_NAMECREDENTIAL_FILENAME: 'BPOINT_FOR_OTHERS.namedCredential-meta.xml'      
      REMOTE_SETTING_AWS_URL_FILE: 'AWS_File.remoteSite-meta.xml'
      REMOTE_SETTING_BPOINT_URL_UAT_FILE: 'BPoint_UAT.remoteSite-meta.xml'
      REMOTE_EDQ_SELF_ACCESS_SITE: 'EDQ_SELF_ACCESS.remoteSite-meta.xml'
      SITE_FILE: '${{secrets.FORCE_APP_DIR_ALL_ENV}}myQBCC.site'
      SETTING_CASE_FILE: 'Case.settings-meta.xml'
      PROFILE_FILE: '*.*'
      QUEUE_MDT_BRISBANE_FILE: 'MDT_NOOF_Brisbane.queue-meta.xml'
      QUEUE_TRUST_ADUIT_TEAM: 'Trust_Audit_Team.queue-meta.xml'
      QUEUE_FINANCIAL_COMPLIANCE_TRUST_ACCOUNTS: 'Financial_Compliance_Trust_Accounts.queue-meta.xml'
      QUEUE_EDUCATION_AND_ENGAGEMENT: 'Education_Engagement.queue-meta.xml'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Add Input Options to Summary
        run: |
          echo '# Deployment Summary for ${{github.ref_name}}' >> $GITHUB_STEP_SUMMARY
          echo '## Input Options' >> $GITHUB_STEP_SUMMARY
          echo '${{ toJson(github.event.inputs) }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
#

       ############################################################################
      # Dependencies and plugin setup                                           ##
      ############################################################################

      # Get context information - branch name
      - name: 'Get Context Information'
        shell: bash
        run: |
          echo "BRANCH_NAME=$(echo ${{github.ref_name}})" >> $GITHUB_ENV
          echo "SERVER_URL=$(echo ${{github.server_url}})" >> $GITHUB_ENV
          echo "REPO_URL=$(echo ${{github.repository}})" >> $GITHUB_ENV
          echo "RUN_ID=${{ github.run_id }}" >> $GITHUB_ENV          

      # Install SF cli with a tar file
      # -------------------------------
      # get tar file,
      # create directory where to install, let say ~/cli/sf
      # unpack the tar file. -C unpacks the contents in the ~/cli/sf directory, while --strip-components 1 removes the root path component.
      - name: 'Install Salesforce CLI with a tar file'
        run: |        
          wget https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-linux-x64.tar.xz
          mkdir ~/cli
          mkdir ~/cli/sf
          tar xJf sf-linux-x64.tar.xz -C ~/cli/sf --strip-components 1
          echo "$HOME/cli/sf/bin" >> $GITHUB_PATH
          ~/cli/sf/bin/sf version
          echo '## SF CLI Details' >> $GITHUB_STEP_SUMMARY   
          echo "CLI Home: $HOME/cli/sf/bin" >> $GITHUB_STEP_SUMMARY
          echo "repo url :${{env.SERVER_URL}}/${{env.REPO_URL}}/tree/${{env.BRANCH_NAME}}"

      # Checkout the source code
      # fetch-depth: Number of commits to fetch. 0 indicates all history for all branches and tags.
      - name: 'Checkout source code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{env.BRANCH_NAME}}

      - name: 'Update git repo url'
        uses: mingjun97/file-regex-replace@v1
        with:
          regex: '"url": "[^"]*"'
          replacement: '"url": "${{env.SERVER_URL}}/${{env.REPO_URL}}/tree/${{env.BRANCH_NAME}}"'
          flags: "gim"                                                                        # Optional, defaults to "g"
          include: "package.json"                                                             # Optional, defaults to ".*"
          exclude: 'Salesforce/'                                                              # Optional, defaults to '.^'
          encoding: 'utf8'                                                                    # Optional, defaults to 'utf8'
          path: "./"

      # Install dependencies set in package-lock.json locates in root of the repo
      - name: Install Nodejs dependencies
        run: npm install

      # Get latest successful commit
      - name: 'Get last successful commit'
        uses: nrwl/nx-set-shas@v4
        id: last_successful_commit
        with:
          main-branch-name: ${{env.BRANCH_NAME}}
          workflow-id: ${{env.WORKFLOW_ID}}
          error-on-no-successful-workflow: false        # set to true to error and exit if no successful workflow run is found

      - name: Set SF_API_VERSION
        run: |
          sourceApiVersion=$(jq '.sourceApiVersion | tonumber' ./sfdx-project.json)
          echo SF_ORG_API_VERSION=$sourceApiVersion.0 >> $GITHUB_ENV
          sf config set org-api-version=$sourceApiVersion.0 --global
          sf config list

      - name: 'echo environment variables'
        run: |
            echo "last successful commit :${{env.NX_BASE}}"
            echo "SF_ORG_API_VERSION :${{env.SF_ORG_API_VERSION}}"
      
      - name: 'Output Change Log'
        id: 'OutputChangeLog'
        run: |
          git log --pretty='%n%s - %an' --no-merges --name-status --branches=${{env.BRANCH_NAME}} ${{steps.last_successful_commit.outputs.base}}... > ./CHANGE_LOG.txt
          echo "Change Log"
          cat ./CHANGE_LOG.txt
          echo '## Change Log' >> $GITHUB_STEP_SUMMARY
          echo "Last successful workflow run commit-id: ${{env.NX_BASE}}" >> $GITHUB_STEP_SUMMARY 
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat ./CHANGE_LOG.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: inject branch based secret values        
        uses: noliran/branch-based-secrets@v1
        with:
            secrets: DEPLOY_SETTINGS

      # retrieve secret values from repo secret into individual env vars
      - name: split secret to env vars
        id: 'SecretSplit'
        run: |
          npm run split --allsecret=${{secrets[env.DEPLOY_SETTINGS_NAME]}}

      - name: spill the splits out
        run: |
          echo "Secrets array : ${{steps.SecretSplit.outputs.json_var}}"